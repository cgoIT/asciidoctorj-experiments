package fr.jmini.asciidoctorj.converter.html;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;

import org.asciidoctor.ast.DescriptionList;
import org.asciidoctor.ast.DescriptionListEntry;
import org.asciidoctor.ast.Document;
import org.asciidoctor.ast.ListItem;

import com.google.common.collect.ImmutableMap;

import fr.jmini.asciidoctorj.converter.html.testing.AbstractListLabeledNestedMixedTesting;

public class ListLabeledNestedMixedTest extends AbstractListLabeledNestedMixedTesting {

    @Override
    protected Document createAstDocument(String asciiDoc) {
        Document mock = createMock();
        return mock;
    }

    @Override
    protected String convertToHtml(Document astDocument) {
        return HtmlConverterTestUtility.convertToHtml(astDocument);
    }

    // tag::mock-code[]
    public Document createMock() {
        Document mockDocument1 = mock(Document.class);
        when(mockDocument1.getId()).thenReturn(null);
        when(mockDocument1.getNodeName()).thenReturn("document");
        when(mockDocument1.getContext()).thenReturn("document");
        when(mockDocument1.getDocument()).thenReturn(mockDocument1);
        when(mockDocument1.isInline()).thenReturn(false);
        when(mockDocument1.isBlock()).thenReturn(true);
        ImmutableMap<String, Object> map1 = ImmutableMap.<String, Object>builder()
                .put("doctype", "article")
                .put("example-caption", "Example")
                .put("filetype", "html")
                .put("notitle", "")
                .put("prewrap", "")
                .build();
        when(mockDocument1.getAttributes()).thenReturn(map1);
        when(mockDocument1.getRoles()).thenReturn(Collections.emptyList());
        when(mockDocument1.isReftext()).thenReturn(false);
        when(mockDocument1.getReftext()).thenReturn(null);
        when(mockDocument1.getTitle()).thenReturn(null);
        when(mockDocument1.getStyle()).thenReturn(null);
        when(mockDocument1.getLevel()).thenReturn(0);
        when(mockDocument1.getContentModel()).thenReturn("compound");
        when(mockDocument1.getSourceLocation()).thenReturn(null);
        when(mockDocument1.getSubstitutions()).thenReturn(Collections.emptyList());
        DescriptionList mockDescriptionList1 = mock(DescriptionList.class);
        when(mockDescriptionList1.getId()).thenReturn(null);
        when(mockDescriptionList1.getNodeName()).thenReturn("dlist");
        when(mockDescriptionList1.getContext()).thenReturn("dlist");
        when(mockDescriptionList1.getDocument()).thenReturn(mockDocument1);
        when(mockDescriptionList1.isInline()).thenReturn(false);
        when(mockDescriptionList1.isBlock()).thenReturn(true);
        when(mockDescriptionList1.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockDescriptionList1.getRoles()).thenReturn(Collections.emptyList());
        when(mockDescriptionList1.isReftext()).thenReturn(false);
        when(mockDescriptionList1.getReftext()).thenReturn(null);
        when(mockDescriptionList1.getTitle()).thenReturn(null);
        when(mockDescriptionList1.getStyle()).thenReturn(null);
        when(mockDescriptionList1.getLevel()).thenReturn(0);
        when(mockDescriptionList1.getContentModel()).thenReturn("compound");
        when(mockDescriptionList1.getSourceLocation()).thenReturn(null);
        when(mockDescriptionList1.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockDescriptionList1.getBlocks()).thenReturn(null);
        DescriptionListEntry mockDescriptionListEntry1 = mock(DescriptionListEntry.class);
        ListItem mockListItem1 = mock(ListItem.class);
        when(mockListItem1.getId()).thenReturn(null);
        when(mockListItem1.getNodeName()).thenReturn("list_item");
        when(mockListItem1.getContext()).thenReturn("list_item");
        when(mockListItem1.getDocument()).thenReturn(mockDocument1);
        when(mockListItem1.isInline()).thenReturn(false);
        when(mockListItem1.isBlock()).thenReturn(true);
        when(mockListItem1.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem1.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem1.isReftext()).thenReturn(false);
        when(mockListItem1.getReftext()).thenReturn(null);
        when(mockListItem1.getTitle()).thenReturn(null);
        when(mockListItem1.getStyle()).thenReturn(null);
        when(mockListItem1.getLevel()).thenReturn(0);
        when(mockListItem1.getContentModel()).thenReturn("compound");
        when(mockListItem1.getSourceLocation()).thenReturn(null);
        when(mockListItem1.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        DescriptionList mockDescriptionList2 = mock(DescriptionList.class);
        when(mockDescriptionList2.getId()).thenReturn(null);
        when(mockDescriptionList2.getNodeName()).thenReturn("dlist");
        when(mockDescriptionList2.getContext()).thenReturn("dlist");
        when(mockDescriptionList2.getDocument()).thenReturn(mockDocument1);
        when(mockDescriptionList2.isInline()).thenReturn(false);
        when(mockDescriptionList2.isBlock()).thenReturn(true);
        when(mockDescriptionList2.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockDescriptionList2.getRoles()).thenReturn(Collections.emptyList());
        when(mockDescriptionList2.isReftext()).thenReturn(false);
        when(mockDescriptionList2.getReftext()).thenReturn(null);
        when(mockDescriptionList2.getTitle()).thenReturn(null);
        when(mockDescriptionList2.getStyle()).thenReturn(null);
        when(mockDescriptionList2.getLevel()).thenReturn(0);
        when(mockDescriptionList2.getContentModel()).thenReturn("compound");
        when(mockDescriptionList2.getSourceLocation()).thenReturn(null);
        when(mockDescriptionList2.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockDescriptionList2.getBlocks()).thenReturn(null);
        DescriptionListEntry mockDescriptionListEntry2 = mock(DescriptionListEntry.class);
        ListItem mockListItem2 = mock(ListItem.class);
        when(mockListItem2.getId()).thenReturn(null);
        when(mockListItem2.getNodeName()).thenReturn("list_item");
        when(mockListItem2.getContext()).thenReturn("list_item");
        when(mockListItem2.getDocument()).thenReturn(mockDocument1);
        when(mockListItem2.isInline()).thenReturn(false);
        when(mockListItem2.isBlock()).thenReturn(true);
        when(mockListItem2.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem2.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem2.isReftext()).thenReturn(false);
        when(mockListItem2.getReftext()).thenReturn(null);
        when(mockListItem2.getTitle()).thenReturn(null);
        when(mockListItem2.getStyle()).thenReturn(null);
        when(mockListItem2.getLevel()).thenReturn(0);
        when(mockListItem2.getContentModel()).thenReturn("compound");
        when(mockListItem2.getSourceLocation()).thenReturn(null);
        when(mockListItem2.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList1 = mock(org.asciidoctor.ast.List.class);
        when(mockList1.getId()).thenReturn(null);
        when(mockList1.getNodeName()).thenReturn("olist");
        when(mockList1.getParent()).thenReturn(mockListItem2);
        when(mockList1.getContext()).thenReturn("olist");
        when(mockList1.getDocument()).thenReturn(mockDocument1);
        when(mockList1.isInline()).thenReturn(false);
        when(mockList1.isBlock()).thenReturn(true);
        when(mockList1.getAttributes()).thenReturn(Collections.singletonMap("style", "arabic"));
        when(mockList1.getRoles()).thenReturn(Collections.emptyList());
        when(mockList1.isReftext()).thenReturn(false);
        when(mockList1.getReftext()).thenReturn(null);
        when(mockList1.getTitle()).thenReturn(null);
        when(mockList1.getStyle()).thenReturn("arabic");
        when(mockList1.getLevel()).thenReturn(1);
        when(mockList1.getContentModel()).thenReturn("compound");
        when(mockList1.getSourceLocation()).thenReturn(null);
        when(mockList1.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList1.getBlocks()).thenReturn(null);
        ListItem mockListItem3 = mock(ListItem.class);
        when(mockListItem3.getId()).thenReturn(null);
        when(mockListItem3.getNodeName()).thenReturn("list_item");
        when(mockListItem3.getParent()).thenReturn(mockList1);
        when(mockListItem3.getContext()).thenReturn("list_item");
        when(mockListItem3.getDocument()).thenReturn(mockDocument1);
        when(mockListItem3.isInline()).thenReturn(false);
        when(mockListItem3.isBlock()).thenReturn(true);
        when(mockListItem3.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem3.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem3.isReftext()).thenReturn(false);
        when(mockListItem3.getReftext()).thenReturn(null);
        when(mockListItem3.getTitle()).thenReturn(null);
        when(mockListItem3.getStyle()).thenReturn(null);
        when(mockListItem3.getLevel()).thenReturn(1);
        when(mockListItem3.getContentModel()).thenReturn("compound");
        when(mockListItem3.getSourceLocation()).thenReturn(null);
        when(mockListItem3.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList2 = mock(org.asciidoctor.ast.List.class);
        when(mockList2.getId()).thenReturn(null);
        when(mockList2.getNodeName()).thenReturn("ulist");
        when(mockList2.getParent()).thenReturn(mockListItem3);
        when(mockList2.getContext()).thenReturn("ulist");
        when(mockList2.getDocument()).thenReturn(mockDocument1);
        when(mockList2.isInline()).thenReturn(false);
        when(mockList2.isBlock()).thenReturn(true);
        when(mockList2.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockList2.getRoles()).thenReturn(Collections.emptyList());
        when(mockList2.isReftext()).thenReturn(false);
        when(mockList2.getReftext()).thenReturn(null);
        when(mockList2.getTitle()).thenReturn(null);
        when(mockList2.getStyle()).thenReturn(null);
        when(mockList2.getLevel()).thenReturn(1);
        when(mockList2.getContentModel()).thenReturn("compound");
        when(mockList2.getSourceLocation()).thenReturn(null);
        when(mockList2.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList2.getBlocks()).thenReturn(null);
        ListItem mockListItem4 = mock(ListItem.class);
        when(mockListItem4.getId()).thenReturn(null);
        when(mockListItem4.getNodeName()).thenReturn("list_item");
        when(mockListItem4.getParent()).thenReturn(mockList2);
        when(mockListItem4.getContext()).thenReturn("list_item");
        when(mockListItem4.getDocument()).thenReturn(mockDocument1);
        when(mockListItem4.isInline()).thenReturn(false);
        when(mockListItem4.isBlock()).thenReturn(true);
        when(mockListItem4.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem4.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem4.isReftext()).thenReturn(false);
        when(mockListItem4.getReftext()).thenReturn(null);
        when(mockListItem4.getTitle()).thenReturn(null);
        when(mockListItem4.getStyle()).thenReturn(null);
        when(mockListItem4.getLevel()).thenReturn(1);
        when(mockListItem4.getContentModel()).thenReturn("compound");
        when(mockListItem4.getSourceLocation()).thenReturn(null);
        when(mockListItem4.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem4.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem4.getMarker()).thenReturn("*");
        when(mockListItem4.getText()).thenReturn("Desktop");
        when(mockListItem4.getSource()).thenReturn("Desktop");
        when(mockListItem4.hasText()).thenReturn(true);
        when(mockList2.getItems()).thenReturn(Collections.singletonList(mockListItem4));
        when(mockList2.hasItems()).thenReturn(true);
        when(mockListItem3.getBlocks()).thenReturn(Collections.singletonList(mockList2));
        when(mockListItem3.getMarker()).thenReturn(".");
        when(mockListItem3.getText()).thenReturn("Fedora");
        when(mockListItem3.getSource()).thenReturn("Fedora");
        when(mockListItem3.hasText()).thenReturn(true);
        ListItem mockListItem5 = mock(ListItem.class);
        when(mockListItem5.getId()).thenReturn(null);
        when(mockListItem5.getNodeName()).thenReturn("list_item");
        when(mockListItem5.getParent()).thenReturn(mockList1);
        when(mockListItem5.getContext()).thenReturn("list_item");
        when(mockListItem5.getDocument()).thenReturn(mockDocument1);
        when(mockListItem5.isInline()).thenReturn(false);
        when(mockListItem5.isBlock()).thenReturn(true);
        when(mockListItem5.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem5.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem5.isReftext()).thenReturn(false);
        when(mockListItem5.getReftext()).thenReturn(null);
        when(mockListItem5.getTitle()).thenReturn(null);
        when(mockListItem5.getStyle()).thenReturn(null);
        when(mockListItem5.getLevel()).thenReturn(1);
        when(mockListItem5.getContentModel()).thenReturn("compound");
        when(mockListItem5.getSourceLocation()).thenReturn(null);
        when(mockListItem5.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList3 = mock(org.asciidoctor.ast.List.class);
        when(mockList3.getId()).thenReturn(null);
        when(mockList3.getNodeName()).thenReturn("ulist");
        when(mockList3.getParent()).thenReturn(mockListItem5);
        when(mockList3.getContext()).thenReturn("ulist");
        when(mockList3.getDocument()).thenReturn(mockDocument1);
        when(mockList3.isInline()).thenReturn(false);
        when(mockList3.isBlock()).thenReturn(true);
        when(mockList3.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockList3.getRoles()).thenReturn(Collections.emptyList());
        when(mockList3.isReftext()).thenReturn(false);
        when(mockList3.getReftext()).thenReturn(null);
        when(mockList3.getTitle()).thenReturn(null);
        when(mockList3.getStyle()).thenReturn(null);
        when(mockList3.getLevel()).thenReturn(1);
        when(mockList3.getContentModel()).thenReturn("compound");
        when(mockList3.getSourceLocation()).thenReturn(null);
        when(mockList3.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList3.getBlocks()).thenReturn(null);
        ListItem mockListItem6 = mock(ListItem.class);
        when(mockListItem6.getId()).thenReturn(null);
        when(mockListItem6.getNodeName()).thenReturn("list_item");
        when(mockListItem6.getParent()).thenReturn(mockList3);
        when(mockListItem6.getContext()).thenReturn("list_item");
        when(mockListItem6.getDocument()).thenReturn(mockDocument1);
        when(mockListItem6.isInline()).thenReturn(false);
        when(mockListItem6.isBlock()).thenReturn(true);
        when(mockListItem6.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem6.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem6.isReftext()).thenReturn(false);
        when(mockListItem6.getReftext()).thenReturn(null);
        when(mockListItem6.getTitle()).thenReturn(null);
        when(mockListItem6.getStyle()).thenReturn(null);
        when(mockListItem6.getLevel()).thenReturn(1);
        when(mockListItem6.getContentModel()).thenReturn("compound");
        when(mockListItem6.getSourceLocation()).thenReturn(null);
        when(mockListItem6.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem6.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem6.getMarker()).thenReturn("*");
        when(mockListItem6.getText()).thenReturn("Desktop");
        when(mockListItem6.getSource()).thenReturn("Desktop");
        when(mockListItem6.hasText()).thenReturn(true);
        ListItem mockListItem7 = mock(ListItem.class);
        when(mockListItem7.getId()).thenReturn(null);
        when(mockListItem7.getNodeName()).thenReturn("list_item");
        when(mockListItem7.getParent()).thenReturn(mockList3);
        when(mockListItem7.getContext()).thenReturn("list_item");
        when(mockListItem7.getDocument()).thenReturn(mockDocument1);
        when(mockListItem7.isInline()).thenReturn(false);
        when(mockListItem7.isBlock()).thenReturn(true);
        when(mockListItem7.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem7.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem7.isReftext()).thenReturn(false);
        when(mockListItem7.getReftext()).thenReturn(null);
        when(mockListItem7.getTitle()).thenReturn(null);
        when(mockListItem7.getStyle()).thenReturn(null);
        when(mockListItem7.getLevel()).thenReturn(1);
        when(mockListItem7.getContentModel()).thenReturn("compound");
        when(mockListItem7.getSourceLocation()).thenReturn(null);
        when(mockListItem7.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem7.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem7.getMarker()).thenReturn("*");
        when(mockListItem7.getText()).thenReturn("Server");
        when(mockListItem7.getSource()).thenReturn("Server");
        when(mockListItem7.hasText()).thenReturn(true);
        when(mockList3.getItems()).thenReturn(Arrays.asList(mockListItem6, mockListItem7));
        when(mockList3.hasItems()).thenReturn(true);
        when(mockListItem5.getBlocks()).thenReturn(Collections.singletonList(mockList3));
        when(mockListItem5.getMarker()).thenReturn(".");
        when(mockListItem5.getText()).thenReturn("Ubuntu");
        when(mockListItem5.getSource()).thenReturn("Ubuntu");
        when(mockListItem5.hasText()).thenReturn(true);
        when(mockList1.getItems()).thenReturn(Arrays.asList(mockListItem3, mockListItem5));
        when(mockList1.hasItems()).thenReturn(true);
        when(mockListItem2.getBlocks()).thenReturn(Collections.singletonList(mockList1));
        when(mockListItem2.getMarker()).thenReturn(null);
        when(mockListItem2.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem2.getSource()).thenReturn(null);
        when(mockListItem2.hasText()).thenReturn(false);
        when(mockDescriptionListEntry2.getDescription()).thenReturn(mockListItem2);
        ListItem mockListItem8 = mock(ListItem.class);
        when(mockListItem8.getId()).thenReturn(null);
        when(mockListItem8.getNodeName()).thenReturn("list_item");
        when(mockListItem8.getContext()).thenReturn("list_item");
        when(mockListItem8.getDocument()).thenReturn(mockDocument1);
        when(mockListItem8.isInline()).thenReturn(false);
        when(mockListItem8.isBlock()).thenReturn(true);
        when(mockListItem8.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem8.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem8.isReftext()).thenReturn(false);
        when(mockListItem8.getReftext()).thenReturn(null);
        when(mockListItem8.getTitle()).thenReturn(null);
        when(mockListItem8.getStyle()).thenReturn(null);
        when(mockListItem8.getLevel()).thenReturn(0);
        when(mockListItem8.getContentModel()).thenReturn("compound");
        when(mockListItem8.getSourceLocation()).thenReturn(null);
        when(mockListItem8.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem8.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem8.getMarker()).thenReturn(null);
        when(mockListItem8.getText()).thenReturn("Linux");
        when(mockListItem8.getSource()).thenReturn("Linux");
        when(mockListItem8.hasText()).thenReturn(true);
        when(mockDescriptionListEntry2.getTerms()).thenReturn(Collections.singletonList(mockListItem8));
        DescriptionListEntry mockDescriptionListEntry3 = mock(DescriptionListEntry.class);
        ListItem mockListItem9 = mock(ListItem.class);
        when(mockListItem9.getId()).thenReturn(null);
        when(mockListItem9.getNodeName()).thenReturn("list_item");
        when(mockListItem9.getContext()).thenReturn("list_item");
        when(mockListItem9.getDocument()).thenReturn(mockDocument1);
        when(mockListItem9.isInline()).thenReturn(false);
        when(mockListItem9.isBlock()).thenReturn(true);
        when(mockListItem9.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem9.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem9.isReftext()).thenReturn(false);
        when(mockListItem9.getReftext()).thenReturn(null);
        when(mockListItem9.getTitle()).thenReturn(null);
        when(mockListItem9.getStyle()).thenReturn(null);
        when(mockListItem9.getLevel()).thenReturn(0);
        when(mockListItem9.getContentModel()).thenReturn("compound");
        when(mockListItem9.getSourceLocation()).thenReturn(null);
        when(mockListItem9.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList4 = mock(org.asciidoctor.ast.List.class);
        when(mockList4.getId()).thenReturn(null);
        when(mockList4.getNodeName()).thenReturn("olist");
        when(mockList4.getParent()).thenReturn(mockListItem9);
        when(mockList4.getContext()).thenReturn("olist");
        when(mockList4.getDocument()).thenReturn(mockDocument1);
        when(mockList4.isInline()).thenReturn(false);
        when(mockList4.isBlock()).thenReturn(true);
        when(mockList4.getAttributes()).thenReturn(Collections.singletonMap("style", "arabic"));
        when(mockList4.getRoles()).thenReturn(Collections.emptyList());
        when(mockList4.isReftext()).thenReturn(false);
        when(mockList4.getReftext()).thenReturn(null);
        when(mockList4.getTitle()).thenReturn(null);
        when(mockList4.getStyle()).thenReturn("arabic");
        when(mockList4.getLevel()).thenReturn(1);
        when(mockList4.getContentModel()).thenReturn("compound");
        when(mockList4.getSourceLocation()).thenReturn(null);
        when(mockList4.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList4.getBlocks()).thenReturn(null);
        ListItem mockListItem10 = mock(ListItem.class);
        when(mockListItem10.getId()).thenReturn(null);
        when(mockListItem10.getNodeName()).thenReturn("list_item");
        when(mockListItem10.getParent()).thenReturn(mockList4);
        when(mockListItem10.getContext()).thenReturn("list_item");
        when(mockListItem10.getDocument()).thenReturn(mockDocument1);
        when(mockListItem10.isInline()).thenReturn(false);
        when(mockListItem10.isBlock()).thenReturn(true);
        when(mockListItem10.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem10.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem10.isReftext()).thenReturn(false);
        when(mockListItem10.getReftext()).thenReturn(null);
        when(mockListItem10.getTitle()).thenReturn(null);
        when(mockListItem10.getStyle()).thenReturn(null);
        when(mockListItem10.getLevel()).thenReturn(1);
        when(mockListItem10.getContentModel()).thenReturn("compound");
        when(mockListItem10.getSourceLocation()).thenReturn(null);
        when(mockListItem10.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem10.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem10.getMarker()).thenReturn(".");
        when(mockListItem10.getText()).thenReturn("FreeBSD");
        when(mockListItem10.getSource()).thenReturn("FreeBSD");
        when(mockListItem10.hasText()).thenReturn(true);
        ListItem mockListItem11 = mock(ListItem.class);
        when(mockListItem11.getId()).thenReturn(null);
        when(mockListItem11.getNodeName()).thenReturn("list_item");
        when(mockListItem11.getParent()).thenReturn(mockList4);
        when(mockListItem11.getContext()).thenReturn("list_item");
        when(mockListItem11.getDocument()).thenReturn(mockDocument1);
        when(mockListItem11.isInline()).thenReturn(false);
        when(mockListItem11.isBlock()).thenReturn(true);
        when(mockListItem11.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem11.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem11.isReftext()).thenReturn(false);
        when(mockListItem11.getReftext()).thenReturn(null);
        when(mockListItem11.getTitle()).thenReturn(null);
        when(mockListItem11.getStyle()).thenReturn(null);
        when(mockListItem11.getLevel()).thenReturn(1);
        when(mockListItem11.getContentModel()).thenReturn("compound");
        when(mockListItem11.getSourceLocation()).thenReturn(null);
        when(mockListItem11.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem11.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem11.getMarker()).thenReturn(".");
        when(mockListItem11.getText()).thenReturn("NetBSD");
        when(mockListItem11.getSource()).thenReturn("NetBSD");
        when(mockListItem11.hasText()).thenReturn(true);
        when(mockList4.getItems()).thenReturn(Arrays.asList(mockListItem10, mockListItem11));
        when(mockList4.hasItems()).thenReturn(true);
        when(mockListItem9.getBlocks()).thenReturn(Collections.singletonList(mockList4));
        when(mockListItem9.getMarker()).thenReturn(null);
        when(mockListItem9.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem9.getSource()).thenReturn(null);
        when(mockListItem9.hasText()).thenReturn(false);
        when(mockDescriptionListEntry3.getDescription()).thenReturn(mockListItem9);
        ListItem mockListItem12 = mock(ListItem.class);
        when(mockListItem12.getId()).thenReturn(null);
        when(mockListItem12.getNodeName()).thenReturn("list_item");
        when(mockListItem12.getContext()).thenReturn("list_item");
        when(mockListItem12.getDocument()).thenReturn(mockDocument1);
        when(mockListItem12.isInline()).thenReturn(false);
        when(mockListItem12.isBlock()).thenReturn(true);
        when(mockListItem12.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem12.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem12.isReftext()).thenReturn(false);
        when(mockListItem12.getReftext()).thenReturn(null);
        when(mockListItem12.getTitle()).thenReturn(null);
        when(mockListItem12.getStyle()).thenReturn(null);
        when(mockListItem12.getLevel()).thenReturn(0);
        when(mockListItem12.getContentModel()).thenReturn("compound");
        when(mockListItem12.getSourceLocation()).thenReturn(null);
        when(mockListItem12.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem12.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem12.getMarker()).thenReturn(null);
        when(mockListItem12.getText()).thenReturn("BSD");
        when(mockListItem12.getSource()).thenReturn("BSD");
        when(mockListItem12.hasText()).thenReturn(true);
        when(mockDescriptionListEntry3.getTerms()).thenReturn(Collections.singletonList(mockListItem12));
        when(mockDescriptionList2.getItems()).thenReturn(Arrays.asList(mockDescriptionListEntry2, mockDescriptionListEntry3));
        when(mockListItem1.getBlocks()).thenReturn(Collections.singletonList(mockDescriptionList2));
        when(mockListItem1.getMarker()).thenReturn(null);
        when(mockListItem1.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem1.getSource()).thenReturn(null);
        when(mockListItem1.hasText()).thenReturn(false);
        when(mockDescriptionListEntry1.getDescription()).thenReturn(mockListItem1);
        ListItem mockListItem13 = mock(ListItem.class);
        when(mockListItem13.getId()).thenReturn(null);
        when(mockListItem13.getNodeName()).thenReturn("list_item");
        when(mockListItem13.getContext()).thenReturn("list_item");
        when(mockListItem13.getDocument()).thenReturn(mockDocument1);
        when(mockListItem13.isInline()).thenReturn(false);
        when(mockListItem13.isBlock()).thenReturn(true);
        when(mockListItem13.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem13.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem13.isReftext()).thenReturn(false);
        when(mockListItem13.getReftext()).thenReturn(null);
        when(mockListItem13.getTitle()).thenReturn(null);
        when(mockListItem13.getStyle()).thenReturn(null);
        when(mockListItem13.getLevel()).thenReturn(0);
        when(mockListItem13.getContentModel()).thenReturn("compound");
        when(mockListItem13.getSourceLocation()).thenReturn(null);
        when(mockListItem13.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem13.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem13.getMarker()).thenReturn(null);
        when(mockListItem13.getText()).thenReturn("Operating Systems");
        when(mockListItem13.getSource()).thenReturn("Operating Systems");
        when(mockListItem13.hasText()).thenReturn(true);
        when(mockDescriptionListEntry1.getTerms()).thenReturn(Collections.singletonList(mockListItem13));
        DescriptionListEntry mockDescriptionListEntry4 = mock(DescriptionListEntry.class);
        ListItem mockListItem14 = mock(ListItem.class);
        when(mockListItem14.getId()).thenReturn(null);
        when(mockListItem14.getNodeName()).thenReturn("list_item");
        when(mockListItem14.getContext()).thenReturn("list_item");
        when(mockListItem14.getDocument()).thenReturn(mockDocument1);
        when(mockListItem14.isInline()).thenReturn(false);
        when(mockListItem14.isBlock()).thenReturn(true);
        when(mockListItem14.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem14.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem14.isReftext()).thenReturn(false);
        when(mockListItem14.getReftext()).thenReturn(null);
        when(mockListItem14.getTitle()).thenReturn(null);
        when(mockListItem14.getStyle()).thenReturn(null);
        when(mockListItem14.getLevel()).thenReturn(0);
        when(mockListItem14.getContentModel()).thenReturn("compound");
        when(mockListItem14.getSourceLocation()).thenReturn(null);
        when(mockListItem14.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        DescriptionList mockDescriptionList3 = mock(DescriptionList.class);
        when(mockDescriptionList3.getId()).thenReturn(null);
        when(mockDescriptionList3.getNodeName()).thenReturn("dlist");
        when(mockDescriptionList3.getContext()).thenReturn("dlist");
        when(mockDescriptionList3.getDocument()).thenReturn(mockDocument1);
        when(mockDescriptionList3.isInline()).thenReturn(false);
        when(mockDescriptionList3.isBlock()).thenReturn(true);
        when(mockDescriptionList3.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockDescriptionList3.getRoles()).thenReturn(Collections.emptyList());
        when(mockDescriptionList3.isReftext()).thenReturn(false);
        when(mockDescriptionList3.getReftext()).thenReturn(null);
        when(mockDescriptionList3.getTitle()).thenReturn(null);
        when(mockDescriptionList3.getStyle()).thenReturn(null);
        when(mockDescriptionList3.getLevel()).thenReturn(0);
        when(mockDescriptionList3.getContentModel()).thenReturn("compound");
        when(mockDescriptionList3.getSourceLocation()).thenReturn(null);
        when(mockDescriptionList3.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockDescriptionList3.getBlocks()).thenReturn(null);
        DescriptionListEntry mockDescriptionListEntry5 = mock(DescriptionListEntry.class);
        ListItem mockListItem15 = mock(ListItem.class);
        when(mockListItem15.getId()).thenReturn(null);
        when(mockListItem15.getNodeName()).thenReturn("list_item");
        when(mockListItem15.getContext()).thenReturn("list_item");
        when(mockListItem15.getDocument()).thenReturn(mockDocument1);
        when(mockListItem15.isInline()).thenReturn(false);
        when(mockListItem15.isBlock()).thenReturn(true);
        when(mockListItem15.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem15.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem15.isReftext()).thenReturn(false);
        when(mockListItem15.getReftext()).thenReturn(null);
        when(mockListItem15.getTitle()).thenReturn(null);
        when(mockListItem15.getStyle()).thenReturn(null);
        when(mockListItem15.getLevel()).thenReturn(0);
        when(mockListItem15.getContentModel()).thenReturn("compound");
        when(mockListItem15.getSourceLocation()).thenReturn(null);
        when(mockListItem15.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList5 = mock(org.asciidoctor.ast.List.class);
        when(mockList5.getId()).thenReturn(null);
        when(mockList5.getNodeName()).thenReturn("olist");
        when(mockList5.getParent()).thenReturn(mockListItem15);
        when(mockList5.getContext()).thenReturn("olist");
        when(mockList5.getDocument()).thenReturn(mockDocument1);
        when(mockList5.isInline()).thenReturn(false);
        when(mockList5.isBlock()).thenReturn(true);
        when(mockList5.getAttributes()).thenReturn(Collections.singletonMap("style", "arabic"));
        when(mockList5.getRoles()).thenReturn(Collections.emptyList());
        when(mockList5.isReftext()).thenReturn(false);
        when(mockList5.getReftext()).thenReturn(null);
        when(mockList5.getTitle()).thenReturn(null);
        when(mockList5.getStyle()).thenReturn("arabic");
        when(mockList5.getLevel()).thenReturn(1);
        when(mockList5.getContentModel()).thenReturn("compound");
        when(mockList5.getSourceLocation()).thenReturn(null);
        when(mockList5.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList5.getBlocks()).thenReturn(null);
        ListItem mockListItem16 = mock(ListItem.class);
        when(mockListItem16.getId()).thenReturn(null);
        when(mockListItem16.getNodeName()).thenReturn("list_item");
        when(mockListItem16.getParent()).thenReturn(mockList5);
        when(mockListItem16.getContext()).thenReturn("list_item");
        when(mockListItem16.getDocument()).thenReturn(mockDocument1);
        when(mockListItem16.isInline()).thenReturn(false);
        when(mockListItem16.isBlock()).thenReturn(true);
        when(mockListItem16.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem16.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem16.isReftext()).thenReturn(false);
        when(mockListItem16.getReftext()).thenReturn(null);
        when(mockListItem16.getTitle()).thenReturn(null);
        when(mockListItem16.getStyle()).thenReturn(null);
        when(mockListItem16.getLevel()).thenReturn(1);
        when(mockListItem16.getContentModel()).thenReturn("compound");
        when(mockListItem16.getSourceLocation()).thenReturn(null);
        when(mockListItem16.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem16.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem16.getMarker()).thenReturn(".");
        when(mockListItem16.getText()).thenReturn("OpenShift");
        when(mockListItem16.getSource()).thenReturn("OpenShift");
        when(mockListItem16.hasText()).thenReturn(true);
        ListItem mockListItem17 = mock(ListItem.class);
        when(mockListItem17.getId()).thenReturn(null);
        when(mockListItem17.getNodeName()).thenReturn("list_item");
        when(mockListItem17.getParent()).thenReturn(mockList5);
        when(mockListItem17.getContext()).thenReturn("list_item");
        when(mockListItem17.getDocument()).thenReturn(mockDocument1);
        when(mockListItem17.isInline()).thenReturn(false);
        when(mockListItem17.isBlock()).thenReturn(true);
        when(mockListItem17.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem17.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem17.isReftext()).thenReturn(false);
        when(mockListItem17.getReftext()).thenReturn(null);
        when(mockListItem17.getTitle()).thenReturn(null);
        when(mockListItem17.getStyle()).thenReturn(null);
        when(mockListItem17.getLevel()).thenReturn(1);
        when(mockListItem17.getContentModel()).thenReturn("compound");
        when(mockListItem17.getSourceLocation()).thenReturn(null);
        when(mockListItem17.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem17.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem17.getMarker()).thenReturn(".");
        when(mockListItem17.getText()).thenReturn("CloudBees");
        when(mockListItem17.getSource()).thenReturn("CloudBees");
        when(mockListItem17.hasText()).thenReturn(true);
        when(mockList5.getItems()).thenReturn(Arrays.asList(mockListItem16, mockListItem17));
        when(mockList5.hasItems()).thenReturn(true);
        when(mockListItem15.getBlocks()).thenReturn(Collections.singletonList(mockList5));
        when(mockListItem15.getMarker()).thenReturn(null);
        when(mockListItem15.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem15.getSource()).thenReturn(null);
        when(mockListItem15.hasText()).thenReturn(false);
        when(mockDescriptionListEntry5.getDescription()).thenReturn(mockListItem15);
        ListItem mockListItem18 = mock(ListItem.class);
        when(mockListItem18.getId()).thenReturn(null);
        when(mockListItem18.getNodeName()).thenReturn("list_item");
        when(mockListItem18.getContext()).thenReturn("list_item");
        when(mockListItem18.getDocument()).thenReturn(mockDocument1);
        when(mockListItem18.isInline()).thenReturn(false);
        when(mockListItem18.isBlock()).thenReturn(true);
        when(mockListItem18.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem18.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem18.isReftext()).thenReturn(false);
        when(mockListItem18.getReftext()).thenReturn(null);
        when(mockListItem18.getTitle()).thenReturn(null);
        when(mockListItem18.getStyle()).thenReturn(null);
        when(mockListItem18.getLevel()).thenReturn(0);
        when(mockListItem18.getContentModel()).thenReturn("compound");
        when(mockListItem18.getSourceLocation()).thenReturn(null);
        when(mockListItem18.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem18.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem18.getMarker()).thenReturn(null);
        when(mockListItem18.getText()).thenReturn("PaaS");
        when(mockListItem18.getSource()).thenReturn("PaaS");
        when(mockListItem18.hasText()).thenReturn(true);
        when(mockDescriptionListEntry5.getTerms()).thenReturn(Collections.singletonList(mockListItem18));
        DescriptionListEntry mockDescriptionListEntry6 = mock(DescriptionListEntry.class);
        ListItem mockListItem19 = mock(ListItem.class);
        when(mockListItem19.getId()).thenReturn(null);
        when(mockListItem19.getNodeName()).thenReturn("list_item");
        when(mockListItem19.getContext()).thenReturn("list_item");
        when(mockListItem19.getDocument()).thenReturn(mockDocument1);
        when(mockListItem19.isInline()).thenReturn(false);
        when(mockListItem19.isBlock()).thenReturn(true);
        when(mockListItem19.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem19.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem19.isReftext()).thenReturn(false);
        when(mockListItem19.getReftext()).thenReturn(null);
        when(mockListItem19.getTitle()).thenReturn(null);
        when(mockListItem19.getStyle()).thenReturn(null);
        when(mockListItem19.getLevel()).thenReturn(0);
        when(mockListItem19.getContentModel()).thenReturn("compound");
        when(mockListItem19.getSourceLocation()).thenReturn(null);
        when(mockListItem19.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        org.asciidoctor.ast.List mockList6 = mock(org.asciidoctor.ast.List.class);
        when(mockList6.getId()).thenReturn(null);
        when(mockList6.getNodeName()).thenReturn("olist");
        when(mockList6.getParent()).thenReturn(mockListItem19);
        when(mockList6.getContext()).thenReturn("olist");
        when(mockList6.getDocument()).thenReturn(mockDocument1);
        when(mockList6.isInline()).thenReturn(false);
        when(mockList6.isBlock()).thenReturn(true);
        when(mockList6.getAttributes()).thenReturn(Collections.singletonMap("style", "arabic"));
        when(mockList6.getRoles()).thenReturn(Collections.emptyList());
        when(mockList6.isReftext()).thenReturn(false);
        when(mockList6.getReftext()).thenReturn(null);
        when(mockList6.getTitle()).thenReturn(null);
        when(mockList6.getStyle()).thenReturn("arabic");
        when(mockList6.getLevel()).thenReturn(1);
        when(mockList6.getContentModel()).thenReturn("compound");
        when(mockList6.getSourceLocation()).thenReturn(null);
        when(mockList6.getSubstitutions()).thenReturn(Collections.emptyList());
        when(mockList6.getBlocks()).thenReturn(null);
        ListItem mockListItem20 = mock(ListItem.class);
        when(mockListItem20.getId()).thenReturn(null);
        when(mockListItem20.getNodeName()).thenReturn("list_item");
        when(mockListItem20.getParent()).thenReturn(mockList6);
        when(mockListItem20.getContext()).thenReturn("list_item");
        when(mockListItem20.getDocument()).thenReturn(mockDocument1);
        when(mockListItem20.isInline()).thenReturn(false);
        when(mockListItem20.isBlock()).thenReturn(true);
        when(mockListItem20.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem20.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem20.isReftext()).thenReturn(false);
        when(mockListItem20.getReftext()).thenReturn(null);
        when(mockListItem20.getTitle()).thenReturn(null);
        when(mockListItem20.getStyle()).thenReturn(null);
        when(mockListItem20.getLevel()).thenReturn(1);
        when(mockListItem20.getContentModel()).thenReturn("compound");
        when(mockListItem20.getSourceLocation()).thenReturn(null);
        when(mockListItem20.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem20.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem20.getMarker()).thenReturn(".");
        when(mockListItem20.getText()).thenReturn("Amazon EC2");
        when(mockListItem20.getSource()).thenReturn("Amazon EC2");
        when(mockListItem20.hasText()).thenReturn(true);
        ListItem mockListItem21 = mock(ListItem.class);
        when(mockListItem21.getId()).thenReturn(null);
        when(mockListItem21.getNodeName()).thenReturn("list_item");
        when(mockListItem21.getParent()).thenReturn(mockList6);
        when(mockListItem21.getContext()).thenReturn("list_item");
        when(mockListItem21.getDocument()).thenReturn(mockDocument1);
        when(mockListItem21.isInline()).thenReturn(false);
        when(mockListItem21.isBlock()).thenReturn(true);
        when(mockListItem21.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem21.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem21.isReftext()).thenReturn(false);
        when(mockListItem21.getReftext()).thenReturn(null);
        when(mockListItem21.getTitle()).thenReturn(null);
        when(mockListItem21.getStyle()).thenReturn(null);
        when(mockListItem21.getLevel()).thenReturn(1);
        when(mockListItem21.getContentModel()).thenReturn("compound");
        when(mockListItem21.getSourceLocation()).thenReturn(null);
        when(mockListItem21.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem21.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem21.getMarker()).thenReturn(".");
        when(mockListItem21.getText()).thenReturn("Rackspace");
        when(mockListItem21.getSource()).thenReturn("Rackspace");
        when(mockListItem21.hasText()).thenReturn(true);
        when(mockList6.getItems()).thenReturn(Arrays.asList(mockListItem20, mockListItem21));
        when(mockList6.hasItems()).thenReturn(true);
        when(mockListItem19.getBlocks()).thenReturn(Collections.singletonList(mockList6));
        when(mockListItem19.getMarker()).thenReturn(null);
        when(mockListItem19.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem19.getSource()).thenReturn(null);
        when(mockListItem19.hasText()).thenReturn(false);
        when(mockDescriptionListEntry6.getDescription()).thenReturn(mockListItem19);
        ListItem mockListItem22 = mock(ListItem.class);
        when(mockListItem22.getId()).thenReturn(null);
        when(mockListItem22.getNodeName()).thenReturn("list_item");
        when(mockListItem22.getContext()).thenReturn("list_item");
        when(mockListItem22.getDocument()).thenReturn(mockDocument1);
        when(mockListItem22.isInline()).thenReturn(false);
        when(mockListItem22.isBlock()).thenReturn(true);
        when(mockListItem22.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem22.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem22.isReftext()).thenReturn(false);
        when(mockListItem22.getReftext()).thenReturn(null);
        when(mockListItem22.getTitle()).thenReturn(null);
        when(mockListItem22.getStyle()).thenReturn(null);
        when(mockListItem22.getLevel()).thenReturn(0);
        when(mockListItem22.getContentModel()).thenReturn("compound");
        when(mockListItem22.getSourceLocation()).thenReturn(null);
        when(mockListItem22.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem22.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem22.getMarker()).thenReturn(null);
        when(mockListItem22.getText()).thenReturn("IaaS");
        when(mockListItem22.getSource()).thenReturn("IaaS");
        when(mockListItem22.hasText()).thenReturn(true);
        when(mockDescriptionListEntry6.getTerms()).thenReturn(Collections.singletonList(mockListItem22));
        when(mockDescriptionList3.getItems()).thenReturn(Arrays.asList(mockDescriptionListEntry5, mockDescriptionListEntry6));
        when(mockListItem14.getBlocks()).thenReturn(Collections.singletonList(mockDescriptionList3));
        when(mockListItem14.getMarker()).thenReturn(null);
        when(mockListItem14.getText()).thenThrow(new UnsupportedOperationException("NoMethodError"));
        when(mockListItem14.getSource()).thenReturn(null);
        when(mockListItem14.hasText()).thenReturn(false);
        when(mockDescriptionListEntry4.getDescription()).thenReturn(mockListItem14);
        ListItem mockListItem23 = mock(ListItem.class);
        when(mockListItem23.getId()).thenReturn(null);
        when(mockListItem23.getNodeName()).thenReturn("list_item");
        when(mockListItem23.getContext()).thenReturn("list_item");
        when(mockListItem23.getDocument()).thenReturn(mockDocument1);
        when(mockListItem23.isInline()).thenReturn(false);
        when(mockListItem23.isBlock()).thenReturn(true);
        when(mockListItem23.getAttributes()).thenReturn(Collections.emptyMap());
        when(mockListItem23.getRoles()).thenReturn(Collections.emptyList());
        when(mockListItem23.isReftext()).thenReturn(false);
        when(mockListItem23.getReftext()).thenReturn(null);
        when(mockListItem23.getTitle()).thenReturn(null);
        when(mockListItem23.getStyle()).thenReturn(null);
        when(mockListItem23.getLevel()).thenReturn(0);
        when(mockListItem23.getContentModel()).thenReturn("compound");
        when(mockListItem23.getSourceLocation()).thenReturn(null);
        when(mockListItem23.getSubstitutions()).thenReturn(Arrays.asList("specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"));
        when(mockListItem23.getBlocks()).thenReturn(Collections.emptyList());
        when(mockListItem23.getMarker()).thenReturn(null);
        when(mockListItem23.getText()).thenReturn("Cloud Providers");
        when(mockListItem23.getSource()).thenReturn("Cloud Providers");
        when(mockListItem23.hasText()).thenReturn(true);
        when(mockDescriptionListEntry4.getTerms()).thenReturn(Collections.singletonList(mockListItem23));
        when(mockDescriptionList1.getItems()).thenReturn(Arrays.asList(mockDescriptionListEntry1, mockDescriptionListEntry4));
        when(mockDocument1.getBlocks()).thenReturn(Collections.singletonList(mockDescriptionList1));
        when(mockDocument1.getStructuredDoctitle()).thenReturn(null);
        when(mockDocument1.getDoctitle()).thenReturn(null);
        ImmutableMap<Object, Object> map2 = ImmutableMap.<Object, Object>builder()
                .put("attributes", "{}")
                .put("header_footer", false)
                .build();
        when(mockDocument1.getOptions()).thenReturn(map2);
        return mockDocument1;
    }
    // end::mock-code[]
}
